# -*- coding: utf-8 -*-
"""Movie recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1td5itH7PL5b6A-3HTS5h2p5bDC3ssSkG
"""

from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import kagglehub

# Download latest version
path = kagglehub.dataset_download("prajitdatta/movielens-100k-dataset")

print("Path to dataset files:", path)

import os
print(os.listdir(path))

import pandas as pd
ratings = pd.read_csv(path + "/ml-100k/u.data", sep='\t', names=['user_id', 'item_id', 'rating', 'timestamp'])
ratings.head()

# Load movie names
movies = pd.read_csv(path+"/ml-100k/u.item", sep='|', encoding='latin-1', names=[
    "item_id", "movie_title", "release_date", "video_release_date", "IMDb_URL",
    "unknown", "Action", "Adventure", "Animation", "Children's", "Comedy", "Crime",
    "Documentary", "Drama", "Fantasy", "Film-Noir", "Horror", "Musical", "Mystery",
    "Romance", "Sci-Fi", "Thriller", "War", "Western"
])

# Merge movie names into ratings
df = pd.merge(ratings, movies[['item_id', 'movie_title']], on='item_id')
df

#Create a User-Movie Ratings Matrix
user_movie_matrix = df.pivot_table(index='user_id', columns='movie_title', values='rating')

#Fill NaNs with 0
user_movie_matrix_filled = user_movie_matrix.fillna(0)

#Compute Cosine Similarity Between Users
user_similarity = cosine_similarity(user_movie_matrix_filled)

user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)
user_similarity_df

def recommend_movies(user_id, num_recommendations=3):
    # Get similar users to this user, sorted by similarity
    similar_users = user_similarity_df[user_id].sort_values(ascending=False).drop(user_id)

    # Get ratings from the top N similar users
    top_user = similar_users.index[0]
    top_user_ratings = user_movie_matrix.loc[top_user]

    # Get the movies the current user has already rated
    user_seen_movies = user_movie_matrix.loc[user_id][user_movie_matrix.loc[user_id].notna()].index

    # Recommend movies that the similar user rated, but current user hasn't seen
    recommendations = top_user_ratings.drop(user_seen_movies)
    top_recommendations = recommendations.sort_values(ascending=False).head(num_recommendations)

    return top_recommendations.index.tolist()

# Show Recommendations for User
user_id = 2
recommended_movies = recommend_movies(user_id)

print(f"Recommendations for User {user_id}:")
for movie in recommended_movies:
    print("o ", movie)

